@using mostlylucid.pagingtaghelper.Extensions
@model mostlylucid.pagingtaghelper.Models.PagerViewModel
@{
    var totalPages = Model.TotalPages;

    string GetUrl(int page) => Context.BuildPagedUrl(Model.LinkUrl ?? "", page, Model.PageSize, Model.SearchTerm, Model.OrderBy, Model.Descending);


}
@if (totalPages > 1)
{
    <div class="@Model.CssClass flex items-center gap-2 justify-center pager-container">
        @if (Model.ShowPageSize)
        {
            var pagerId = Model.PagerId;
            var htmxAttributes = Model.UseHtmx
                ? $"hx-get=\"{Model.LinkUrl}\" hx-trigger=\"change\" hx-include=\"#{pagerId} [name='page'], #{pagerId} [name='search']\" hx-push-url=\"true\""
                : "";

            <input type="hidden" name="page" value="@Model.Page" />
            <input type="hidden" name="search" value="@Model.SearchTerm" />
            <input type="hidden" class="useHtmx" value="@Model.UseHtmx.ToString().ToLowerInvariant()" />
            if (!Model.UseHtmx)
            {
                <input type="hidden" class="linkUrl" value="@Model.LinkUrl" />
            }

            <div class="flex items-center">
                <label for="pageSize-@pagerId" class="text-sm text-gray-600 dark:text-gray-300 mr-2 whitespace-nowrap">Page size:</label>
                <select id="pageSize-@pagerId"
                        name="pageSize"
                        class="border rounded select select-primary select-sm pt-0 mt-0 min-w-[80px] pr-4 bg-white text-black
                               dark:bg-gray-800 dark:text-white dark:border-gray-600"
                        @Html.Raw(htmxAttributes)>
                    @foreach (var option in Model.PageSizes)
                    {
                        <option value="@option" selected="@(option == Model.PageSize ? "selected" : null)">@option</option>
                    }
                </select>
            </div>
        }

        @if (Model.FirstLastNavigation && Model.Page > 1)
        {
            var href = GetUrl(1);
            <a class="btn btn-sm btn-outline dark:bg-gray-800 dark:text-white dark:border-gray-600"
               href="@href">
                @Model.FirstPageText
            </a>
        }

        @if (Model.Page > 1)
        {
            var href = GetUrl(Model.Page-1);

            <a class="btn btn-sm btn-outline dark:bg-gray-800 dark:text-white dark:border-gray-600"
               href="@href">
                @Model.PreviousPageText
            </a>
        }

        @if (Model.SkipForwardBackNavigation && Model.Page > Model.PagesToDisplay)
        {
            <a class="btn btn-sm btn-disabled dark:bg-gray-700 dark:text-gray-400">
                @Model.SkipBackText
            </a>
        }

        @* Pagination Numbers *@
        @{
            int halfDisplay = Model.PagesToDisplay / 2;
            int startPage = Math.Max(1, Model.Page - halfDisplay);
            int endPage = Math.Min(totalPages, startPage + Model.PagesToDisplay - 1);
            startPage = Math.Max(1, endPage - Model.PagesToDisplay + 1);
        }
        @for (int i = startPage; i <= endPage; i++)
        {
            var href = GetUrl(i);
            <a data-page="@i"
               class="pager-button btn btn-sm 
                      @(i == Model.Page ? "btn-primary btn-active dark:bg-blue-500 dark:border-blue-400 dark:text-white" : "btn-outline dark:bg-gray-800 dark:text-white dark:border-gray-600")"
               href="@href">
                @i
            </a>
        }

        @if (Model.SkipForwardBackNavigation && Model.Page < totalPages - Model.PagesToDisplay + 1)
        {
            <a class="btn btn-sm btn-disabled dark:bg-gray-700 dark:text-gray-400">
                @Model.SkipForwardText
            </a>
        }

        @if (Model.Page < totalPages)
        {
            var href = GetUrl(Model.Page+1);
            <a class="btn btn-sm btn-outline dark:bg-gray-800 dark:text-white dark:border-gray-600"
               href="@href"
               aria-label="@Model.NextPageAriaLabel">
                @Model.NextPageText
            </a>
        }

        @if (Model.FirstLastNavigation && Model.Page < totalPages)
        {
            var href = GetUrl(Model.TotalPages);

            <a class="btn btn-sm btn-outline dark:bg-gray-800 dark:text-white dark:border-gray-600"
               href="@href">
                @Model.LastPageText
            </a>
        }
@if (Model.ShowSummary)
        {


            <div class="text-sm text-gray-600 dark:text-gray-300">
                Page @Model.Page of @totalPages (Total items: @Model.TotalItems)
            </div>
        }
    </div>
}